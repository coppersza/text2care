// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20221009105155_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Core.Entities.Donator", b =>
                {
                    b.Property<string>("DonatorUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.Property<string>("PortalPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("PortalUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Suburb")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("DonatorUID");

                    b.HasIndex("CountryId");

                    b.ToTable("Donator");
                });

            modelBuilder.Entity("Core.Entities.Employee", b =>
                {
                    b.Property<string>("EmployeeUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.Property<string>("PortalPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("PortalUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Suburb")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeUID");

                    b.HasIndex("CountryId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StoreUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("StoreUID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Core.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("Core.Entities.Recipient", b =>
                {
                    b.Property<string>("RecipientUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.Property<string>("PortalPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("PortalUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Suburb")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("RecipientUID");

                    b.HasIndex("CountryId");

                    b.ToTable("Recipient");
                });

            modelBuilder.Entity("Core.Entities.Store", b =>
                {
                    b.Property<string>("StoreUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.Property<string>("PortalPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("PortalUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Suburb")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("StoreUID");

                    b.HasIndex("CountryId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Core.Entities.StoreRecipient", b =>
                {
                    b.Property<string>("StoreRecipientUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<string>("RecipientUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<string>("StoreUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.HasKey("StoreRecipientUID");

                    b.HasIndex("RecipientUID");

                    b.HasIndex("StoreUID");

                    b.ToTable("StoreRecipient");
                });

            modelBuilder.Entity("Core.Entities.Token", b =>
                {
                    b.Property<string>("TokenUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BuyerEmail")
                        .HasColumnType("TEXT");

                    b.Property<double>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCollected")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateExpire")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateRelease")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateStoreAssigned")
                        .HasColumnType("TEXT");

                    b.Property<string>("DonatorName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DonatorUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<bool>("FoodCollected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecipientName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipientUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<double>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreMealUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<string>("StoreUID")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)");

                    b.Property<string>("TokenName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Valid")
                        .HasColumnType("INTEGER");

                    b.HasKey("TokenUID");

                    b.HasIndex("DonatorUID");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipientUID");

                    b.HasIndex("StoreUID");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("Core.Entities.Donator", b =>
                {
                    b.HasOne("Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Entities.Employee", b =>
                {
                    b.HasOne("Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.HasOne("Core.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreUID");

                    b.Navigation("ProductType");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Core.Entities.Recipient", b =>
                {
                    b.HasOne("Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Entities.Store", b =>
                {
                    b.HasOne("Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Entities.StoreRecipient", b =>
                {
                    b.HasOne("Core.Entities.Recipient", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientUID");

                    b.HasOne("Core.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreUID");

                    b.Navigation("Recipient");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Core.Entities.Token", b =>
                {
                    b.HasOne("Core.Entities.Donator", "Donator")
                        .WithMany()
                        .HasForeignKey("DonatorUID");

                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Recipient", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientUID");

                    b.HasOne("Core.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreUID");

                    b.Navigation("Donator");

                    b.Navigation("Product");

                    b.Navigation("Recipient");

                    b.Navigation("Store");
                });
#pragma warning restore 612, 618
        }
    }
}
